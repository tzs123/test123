{"name": "测试用例描述：查询客户数据", "status": "broken", "statusDetails": {"message": "TypeError: the JSON object must be str, bytes or bytearray, not 'tuple'", "trace": "self = <testcase.test_one.Testmysql object at 0x0000024C6B87C1D0>, action = None\n\n    @allure.story('用户故事描述：查询数据')  # 模块的功能\n    @allure.description('测试描述：查询数据是否正确')\n    @allure.title('测试用例描述：查询客户数据')\n    @allure.severity(allure.severity_level.BLOCKER)\n    def test_03(self,action):\n        db = pymysql.connect(host = '192.168.0.219',port =3306,db='test',user='root',passwd='123',charset='utf8')\n        info = db.cursor()\n        info.execute('select id,username from sec_custinfo')\n        data = info.fetchall()\n>       aa = json.loads(data)\n\ntest_one.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = (('1', '董卓'), ('2', '张坤'), ('3', '王伟'), ('4', '王伟'), ('5', '宋军'), ('6', '陈红'), ...)\nencoding = None, cls = None, object_hook = None, parse_float = None\nparse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, encoding=None, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders that rely on the\n        order that the key and value pairs are decoded (for example,\n        collections.OrderedDict will remember the order of insertion). If\n        ``object_hook`` is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated.\n    \n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError('the JSON object must be str, bytes or bytearray, '\n>                               'not {!r}'.format(s.__class__.__name__))\nE               TypeError: the JSON object must be str, bytes or bytearray, not 'tuple'\n\n..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python36\\lib\\json\\__init__.py:348: TypeError"}, "description": "测试描述：查询数据是否正确", "start": 1651661247776, "stop": 1651661247778, "uuid": "7bfc2679-82fc-42e8-884c-686534062c67", "historyId": "e80dcb360667126e504de2bd04d2fb61", "testCaseId": "673d513ad150bc91b8f870520ad0cdeb", "fullName": "test_one.Testmysql#test_03", "labels": [{"name": "story", "value": "用户故事描述：查询数据"}, {"name": "epic", "value": "*************测试描述*************"}, {"name": "severity", "value": "blocker"}, {"name": "feature", "value": "数据库"}, {"name": "suite", "value": "test_one"}, {"name": "subSuite", "value": "Testmysql"}, {"name": "host", "value": "MS-SLSXLICKSUSF"}, {"name": "thread", "value": "6340-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_one"}]}